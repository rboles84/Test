name: Push RAG+MOP starter files

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  push-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create branch & add starter files via GitHub API
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // This script creates (or re-uses) a branch 'setup-rag-mop' based on main
            // and creates/updates a small set of starter files on that branch.
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = 'setup-rag-mop';

            // Get the main branch SHA to branch from
            const mainRef = await github.rest.git.getRef({
              owner,
              repo,
              ref: 'heads/main'
            });
            const sha = mainRef.data.object.sha;

            // Create the new branch (ignore if exists)
            try {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: 'refs/heads/' + branch,
                sha
              });
              console.log(`Created branch ${branch}`);
            } catch (err) {
              if (err.status === 422) {
                console.log(`Branch ${branch} already exists; continuing`);
              } else {
                throw err;
              }
            }

            // Helper to create or update a file on the branch
            async function putFile(path, content, message) {
              const encoded = Buffer.from(content, 'utf8').toString('base64');
              // Check if file exists on branch
              let existing = null;
              try {
                existing = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path,
                  ref: branch
                });
              } catch (err) {
                if (err.status !== 404) throw err;
              }

              const params = {
                owner,
                repo,
                path,
                message,
                content: encoded,
                branch
              };
              if (existing && existing.data && existing.data.sha) {
                params.sha = existing.data.sha;
              }
              await github.rest.repos.createOrUpdateFileContents(params);
              console.log(`${existing ? 'Updated' : 'Created'} ${path}`);
            }

            // Minimal starter files (shortened versions). Replace or expand these contents as needed.
            const files = {
              'README.md': `# Test Case Generator - RAG + Master Orchestration Prompt (starter)

# This repository contains starter code and templates for building a Retrieval-Augmented Generation (RAG) system with a Master Orchestration Prompt (MOP) to generate standard, repeatable test cases from acceptance criteria, Jira tickets, and other test artifacts (ISTQB PDFs, white papers, business rules, etc).

# See ARCHITECTURE.md and prompts/mop_template.md for details.
# `,

              # 'ARCHITECTURE.md': `# Architecture & Setup Notes

# Overview
# - Ingest pipeline: convert PDFs, HTML, Jira tickets, and spreadsheets into plain text, enrich with metadata, chunk text, compute embeddings, and upsert to a vector store.
# - Vector store: Chroma, FAISS, Pinecone, or Weaviate recommended.
# - Use sentence-transformers or OpenAI embeddings; use an LLM as generator (OpenAI / Anthropic / local LLM).

# GitHub setup: add OPENAI_API_KEY and other secrets in repo Settings -> Secrets.
# `,

              'requirements.txt': `langchain>=0.0.400
openai>=1.0.0
tiktoken
pypdf
chromadb
sentence-transformers
faiss-cpu
fastapi
uvicorn
pytest
python-dotenv
requests
`,

              '.gitignore': `.env
__pycache__/
*.pyc
.vscode/
.chromadb/
data/
uploads/
`,

              '.github/workflows/ci.yml': `name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        env:
          # Note: this placeholder is included literally in file content; it does not get expanded by this workflow run.
          OPENAI_API_KEY: ${{'{'+'{ secrets.OPENAI_API_KEY }'+'}'}} 
        run: |
          pytest -q
`,

              'prompts/mop_template.md': `# Master Orchestration Prompt (MOP) - template

SYSTEM INSTRUCTIONS:
You are a disciplined test-case generator assistant. Your output MUST be JSON that exactly matches the OUTPUT_SCHEMA below. Use only the retrieved CONTEXT when relevant.
`,

              'docs/acceptance_criteria_template.md': `# Acceptance Criteria / Ticket Template

Provide acceptance criteria in a consistent format. Example template included.
`
            };

            // Create or update files on the branch
            for (const [path, content] of Object.entries(files)) {
              await putFile(path, content, `chore: add ${path} (RAG+MOP starter)`);
            }

            console.log('All starter files created/updated on branch ' + branch);
